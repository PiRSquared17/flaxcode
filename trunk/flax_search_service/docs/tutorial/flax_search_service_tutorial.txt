============================
Flax Search Service Tutorial
============================

Overview
========
This document, and associated files, covers the basics of running the Flax 
Search Service and using it to index, retrieve, and search for documents using 
a simple schema. It is applicable to all the existing client libraries (Python,
PHP and Perl).

Requirements
============
To follow this tutorial, you will need:  

    1. Xapian 1.0.6 or later installed on your computer.
    2. Python 2.5 or 2.6 (required for the search service).
    3. Xapian Python bindings.
    4. Flax Search Service and Search Clients.

To follow the tutorial with the PHP client library, you will need the PHP 5 
command-line interpreter. Perl 5 is required for the Perl client.

Getting Started
===============
If necessary, install the required software. Then start the Search Service by 
cd'ing to the ``flax_search_service`` directory and running::

    python runserver.py
    
This will start the server listening on port 8080. To use a different port (if 
for example you have an existing service on 8080), edit the ``settings.py`` 
file and replace "8080"in the ``server_bind_address`` parameter with a suitable 
value.

By default, the search service stores data in ``/tmp``. To specify a different 
location, supply it as a parameter when starting the service, e.g.::

    python runserver.py /usr/lib/flaxdata

If you have the ``curl`` command available, you can test Flax by opening another
terminal window and running::

    curl http://localhost:8080/

This will return information about the search service, formatted as JSON, e.g.::

    {"backends": {}, "versions": {"PROTOCOL": "dev20090312", "SERVER": "0.1"}}

Don't worry about the exact meaning of these values.

Loading the client libraries
============================
In order to run the examples for Python, Perl or PHP, the relevant interpreter 
needs to be able to locate the client libraries for loading. These are located 
in subdirectories of ``clients``. The simplest method may be to create symbolic
links from the appropriate client directory into the tutorial directory, 
e.g. for Python::

    $ cd docs/tutorial/python
    $ ln -s ../../../clients/python/flax .

Alternatively, add the location of the client library to ``PYTHONPATH`` (for 
Python), ``@INC`` (for Perl), or your PHP configuration file.

Creating a Database
===================
The search server can support multiple databases, each of which is identified by
a name. Currently, the name must only consist of ASCII letters and numbers, plus
the characters "." and/or "_" (we plan to lift this restriction in a future 
release).

To create a database, an HTTP POST request is made to the database resource URL
on the search server. This will usually be done via the client libraries, and in
this tutorial is handled in the next setp.

Setting up a Schema
===================
In Flax, documents consist of a simple flat set of named fields, where each 
field has one or more string values. Fields may be indexed for full-text 
searching or act as Boolean filters, and may be stored in the database or not 
(indexed fields do not need to be stored in order to be used for searching). 
Other options, e.g. for spelling correction or stemming (FIXME) can also be set
on a field-by-field basis. The set of named fields and associated parameters is
called a *schema*, and must be configured before documents are added to the
database.

The example data in this tutorial consists of a short set of book descriptions,
stored in the files `books1.txt` and `books2.txt`. Each record has the following
fields:

    * ``title``:    The title of the book.
    * ``author``:   The author of the book.
    * ``first``:    The first sentence in the book.
    * ``isbn``:     The ISBN (International Standard Book Number).

We will handle these fields as follow:

    * ``title``:    Index as free text, and store in DB.
    * ``author``:   Index as a Boolean filter, and store.
    * ``first``:    Index as free text, and *don't* store.
    * ``isbn``:     Use as document ID.

It is slightly artificial not to store the ``first`` field, since it has such 
low storage requirements, but it shows that this is possible. In addition, we
will set the ``language`` parameter of the free text fields to be ``en``, which
will apply English stemming to the indexing and search processes (FIXME).

Note that there is no ``isbn`` field, as we will use this as the document ID 
(which is separate from the field structure).

To create a database called "books" and set this schema on it, run the 
``t1_create_db`` script in your language of choice. Each step is described by 
comments in the script file.

Assuming this runs without error, you will now have a database called "books" 
with a suitable schema for indexing the book data. To display the schema,
run the script ``t2_show_schema``.

Indexing Documents
==================
Documents are added to a database by POSTing them to the ``docs`` resource on
the search server. They are represented as JSON objects, where keys are 
fieldnames and values are strings (or lists of strings, for multiple field 
values). In the client libraries, this is represented by the ``add_document``
method of the database object.

For reasons of efficiency, Flax does not make added documents immediately 
available for searching. Instead, it batches them in memory. The database may
be flushed at any time to write these changes to disk and make them available
to searches. Flax search server exposes this functionality through the flush/
resource, which responds to a POST request by flushing the database. In the
client libraries, the flush() method of database objects has the same effect.

To add the first batch of 5 books to the database, run the ``t3_index_books``
script, on the ``books1.txt`` file, e.g.:

    $ python t3_index_books.py ../books1.txt
    
This script reads each book object from the text file and creates a Flax
document from it (the exact API depends on the scripting language; in Python,
a Flax document is just a Python dict keyed by fieldname). Notice how the
ISBN code is used as the document ID. After adding the books, the script
flushes the database.

To check that the books have been added, run the ``t4_show_db_info`` script.
This will display, amongst other things, a ``doccount`` field with a value
of 5. This is the number of documents in the database.

Now add the second batch of books, ``books2.txt`` using ``t3_index_books``.
If you compare the two books files, you will see that there are two books in
common, The Periodic Table by Primo Levi and The Concept of Mind by Gilbert
Ryle. These have the same ISBN number. As we are using this for the document
ID, the data in ``books2.txt`` should replace the documents previously added.
Check this by running ``t4_show_db_info`` again, which will correctly give
a total document count of 10.

Retrieving Documents
====================
Each document in a database is represented on the Flax server by a resource
with the path: ``docs/<doc_id>``. Like database names, document IDs can only 
consist of letters, numbers, "." and "_". The client libraries work around this
by URL-encoding document IDs, which can thus consist of an arbitrary string.

Documents are retrieved using the ``get_document`` method of database objects, 
as in the ``t5_get_doc`` script, e.g.:

    $ python t5_get_doc.py 978-1-84149-419-7
    
    {u'author': [u'Iain M. Banks'], u'title': [u'Matter']}


Searching
=========
Searching is accessed on the server through the ``search`` resource, which has
``simple``, ``structured`` and ``similar`` variants. To search, the client 
sends a GET request with a query string containing the search words and other
necessary parameters.

The client libraries provide search functionality via methods on database 
objects, which return match result objects. The ``t6_search`` script 
demonstrates this by running a search on the server and printing selected 
information about the documents found. For example:

    $ python t6_search.py first

    1 to 3 of 3 results:
    (1) Demon
    (2) Ham On Rye
    (3) Tales of the City

An example of a structured search is shown in the script ``t7_search_author``,
which searches in the author field. Since author was indexed as a Boolean
filter, we must supply the value exactly as it appears in the document. e.g.:

    $ python t7_search_author.py John

    no results

    $ python t7_search_author.py "John Irving"

    1 to 2 of 2 results:
    (1) The Hotel New Hampshire
    (2) The World According to Garp


Further Information
===================
info@flax.co.uk

FIXME
