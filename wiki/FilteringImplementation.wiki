#summary Flax Document Filters Implementation.
#labels Status-Accepted,Phase-Design


= Introduction =


FilterInterface describes the interface that we expect filters to
implement. For version 1.0 we intend to support at least the following
document formats on windows:


  * Plain text.
  * HTML.
  * MS Word.
  * MS Excel.
  * MS Power Point.
  * PDF.


It is possible to do this on Windows with a single filter that hooks
into the Windows Indexing Service infrastuture.  However, we'll probably use
the Xapian HTML parser to handle HTML, since it is specially designed for this
task.


== IFilter Background ==


The [http://msdn2.microsoft.com/en-us/library/ms691105.aspx IFilter]
interface is designed for this kind of application. There are some
filters implementing this interface for a number of common document
types. IFilters are part of the Windows Index Service see
http://msdn2.microsoft.com/en-us/library/aa163263.aspx.


There is a mechanism for determining which filter to use on a given
file. The SDK functions
[http://msdn2.microsoft.com/en-us/library/ms691002.aspx LoadIFilter],
[http://msdn2.microsoft.com/en-us/library/ms690929.aspx
BindIFilterFromStorage] and
[http://msdn2.microsoft.com/en-us/library/ms690827.aspx
BindIFilterFromStream] all use information in the registry to
determine which registered filter to use with a particular file. (It
is possible to directly load the dlls, but we do not need to do so now
so this is not discussed further.)


The filter interface is flexible and appears to work roughly as
follows. Repeated calls `IFilter::GetChunk`, return
[http://msdn2.microsoft.com/en-us/library/ms691016.aspx `STAT_CHUNK`]
data. This provides some information about the current chunk, in
particular the `flags` property, or type
[http://msdn2.microsoft.com/en-us/library/ms691020.aspx `CHUNKSTATE`]
tells you whether the chunk is text or some other kind of data. If it
is text (`CHUNK_TEXT` is set) then you can call `IFilter::GetText` to
get the text from the current chunk. (Note that each chunk of text can
have a different locale , so from this perspective language is not
per-document, but per-chunk.) `STAT_CHUNK` also has a property
`attribute` which gives more information about the chunk, which
provides for mapping chunk contents to particular xapian fields.


The chunk may additionally, or alternatively have `CHUNK_VALUE`
set. In this case calling `IFilter::GetValue` gets the value. This can
yield any kind of data.  It could be that there is useful text
embedded with these chunks, but the practicability of extracting the
text depends on determining the format of the data and having a filter
for such data. In the first instance it might be wise to ignore value
chunks and see what kind of results we get by just looking at text
chunks.


There are some code
[http://msdn2.microsoft.com/en-us/library/ms689723.aspx samples] that
may be worth examining.


== Flax filter using IFilters ==


There is an
[http://pywin32.cvs.sourceforge.net/pywin32/pywin32/com/win32comext/ifilter/demo/filterDemo.py?view=markup&sortdir=down
example] of using IFilters via COM in the python windows extensions
[http://sourceforge.net/projects/pywin32/ distribution]. This has been
used as the basis of a
[http://flaxcode.googlecode.com/svn/trunk/src/w32com_ifilter.py
filter] conforming to FilterInterface.



== Simple Text Filter ==


For text documents, for testing, and for non-windows platforms it is
convenient to have a simple filter for text files. This has been
[http://flaxcode.googlecode.com/svn/trunk/src/simple_text_filter.py
implemented].



== HTML Filter ==


Xapian has a good HTML parser for extracting text (whilst ignoring extraneous
information like <script> tags).  We will use this to build an HTML filter.  This
is expected to give better results than the IFilter filter (and be more reliable:
we've used the xapian HTML parser in many projects before, and know of no issues
which cause it to hang, loop, or crash).

The same code could be used to make a generic, but simple, XML filter.  We won't
do this for 1.0, but it would be easy to add later.


== Other document filters ==


Eventually we will need non-IFilter mechanisms for parsing documents
on non-Windows platforms. The formats that are likely to give the most
trouble are MS Office. [http://www.winfield.demon.nl/ Antiword] is one
way of extracting text from word documents. Also
[http://www.openoffice.org/ OpenOffice] can parse MS Office documents
and also has python bindings, which can be used to extract text - see
[http://udk.openoffice.org/python/samples/ooextract.py this] example.


Xapian's "omindex" tool has support for indexing from lots of document
formats using unix tools - we should copy at least some of the filter
invocations it uses rather than figuring them out from scratch.  Mostly,
these involve invoking a sub-process to perform the filtering.


Other common document formats that are likely to be of interest are
Open Office itself and PDF (supported by an Adobe IFilter on Windows) for
which there are a number of cross platform libraries.