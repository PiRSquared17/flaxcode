#summary Logging for Flax

= Flax Logging =


This document discusses how Flax should do logging, and is essentially a summary of a conversation in irc. The standard Python logging [http://docs.python.org/lib/module-logging.html module] has good functionality and it would be perverse not to use it unless we had a compelling reason to do otherwise.

There is a detailed article on using the system [http://www.red-dove.com/python_logging.html here].

The configuration file for the logging system is very flexible, but we would like to allow some configuration to happen through the web application.

The difficulty is then that we need to both notice changes to log file and changes through the web app in a consistent fashion.  Note also that some of the logging settings will affect the way that the indexer does logging, and this runs separately from the main web application.

The logging module provides logging.config.listen which listens on a particular port for logging system configuration data.


We therefore plan as follows:

  * There is a separate, relatively simple, process that watches the logging configuration file and, if it changes notifies any listeners (i.e. the web server and the indexer). This program also provides a remote method for changing a limited subset of the logging configuration, which - when used - will cause some corresponding parts of the log configuration file to be re-written.

  * Parts of Flax that generate logging output (currently the web server and the indexer) listen for logging configuration changes using logging.config.listen.

  * The web application includes a form (or forms) for setting certain logging options. This form is populated by programmatically querying the logging module for current settings. Form submission results in  invocation of the remote log configuration change method Note that this does not directly change the current logging settings, but the changes will result in the changes being notified to the listener.

Only a subset of possible configuration options will be provided in the web application, but where more esoteric configuration is desired the fall-back of editing the log file directly remains.

The possibility remains that we have simultaneous attempts to modify logging configuration both by editing the file and using the web app. But those are the breaks - it's no worse than e.g. two separate clients of the web app trying to make changes at the same time.

= Log configuration file program = 

This program has the following functionality.

  * Watches for changes to the log file. On modification it sends a the changed version to any listeners.

  * Allows listeners to register and unregister.

  * Exposes a remote method to accept some changes to the log configuration. On receiving those changes it re-writes parts of the log configuration file appropriately.

== Watching for file changes ==

Unfortunately there doesn't seem to be a nice cross platform way to watch for changes, but at least on Linux there is [http://pyinotify.sourceforge.net/ pyinotify] and [http://sourceforge.net/projects/python-fam/ python-fam] and on windows some techniques to achieve what we want: see [http://tgolden.sc.sabren.com/python/win32_how_do_i/watch_directory_for_changes.html here] and
[http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/156178 here].

Since we are only planning to watch a single file for changes it is probably acceptable to poll that file for changes every few seconds. This the advantage of being simple and working across all platforms. We can always add special case code for particular platforms if performance proves to be a problem.

== Configuring Logging ==

To summarise - the purposes of this setup are:

  *  to allow logging to be configured both via logging configuration file and via the web interface; and

  * to allow changes to the logging configuration to propogate uniformly to all interested components.

The logging module is very flexible and it is probably undesirable to attempt to expose the majarity of possible settings via the web application. Esoteric configurations should be for techy sysadmins (or done as consultancy). The web app should provide a convenient mechanism for configuring a useful subset of the possibilities.

In order to use the configuration possibilities effectively we must determine when code makes logging calls, and which loggers are called in each case. 

The following loggers are used in flax code, loggers emit messages with an associated severity level. Whether or not these messages are actually logged depends on the level of the logger, which may be set via the web application (actually there is more to it than that, but true in the default configuration.)

The message levels are (in decreasing order of severity): `critical`, `error`, `warning`, `info`, `debug`, `notset`. Warnings at each of these levels have the following meanings:

  * `critical`: normal operation is severely compromised. Probably there is a bug or misconfiguration that needs fixing.

  * `error`: something has gone wrong, but the system can continue. However it is probably desirable to understand why the error has occured and address it.

  * `warning`: something has happened that may be undesirable, but it does not have any implication for other parts of the system.

  * `info`: information about normal operations.

  * `debug`: detailed information about the operation of the system. Probably only of interest if trying to diagnose misconfiguration or bugs.

  * `notset`: The logger uses the setting of its parent logger.

The logging system uses a heirarchical system of loggers, with a designated "root logger". By default all the loggers used in Flax inherit the level  of the root logger, which is initialised to `warning`.

The following loggers are used in flax code. 

=== indexing ===

Emits messages to do with the indexing process - e.g. files that are about to be filtered, filters called, return values from filters.

=== filtering ===

Messages about the operation of filters. The filters that ship with Flax all have their own logger that are below this one in the hierarchy. Additional filters should be similar in order to participate in the logging configuration process. In particular they should use a logger obtained with a call like:

   logging.getLogger('filtering.filtername')

where filtername is a name for the filter.

The level at which to report various events take a bit of common sense. Take a look at the filters that ship with Flax, and read the descriptions of the message levels above.


==== filtering.ifilter ====

Messages about the operation of the ifilter filter.

==== filtering.simpletext ====

Messages about the operation of the simple text filter.

=== collections ===

Messages about the creation, deletion and modifications to document collections.

