#summary Logging for Flax

= Flax Logging =


This document discusses how Flax should do logging, and is essentially a summary of a conversation in irc. The standard Python logging [http://docs.python.org/lib/module-logging.html module] has good functionality and it would be perverse not to use it unless we had a compelling reason to do otherwise.

There is a detailed article on using the system [http://www.red-dove.com/python_logging.html here].

The configuration file for the logging system is very flexible, but we would like to allow some configuration to happen through the web application.

The difficulty is then that we need to both notice changes to log file and changes through the web app in a consistent fashion.  Note also that some of the logging settings will affect the way that the indexer does logging, and this runs separately from the main web application.

The logging module provides logging.config.listen which listens on a particular port for logging system configuration data.



We therefore plan as follows:


  * There is a separate, relatively simple, process that watches the logging configuration file and, if it changes notifies any listeners (i.e. the web server and the indexer). This program also provides a remote method for changing a limited subset of the logging configuration, which - when used - will cause some corresponding parts of the log configuration file to be re-written.

  * Parts of Flax that generate logging output (currently the web server and the indexer) listen for logging configuration changes using logging.config.listen.

  * The web application includes a form (or forms) for setting certain logging options. This form is populated by programmatically querying the logging module for current settings. Form submission results in  invocation of the remote log configuration change method Note that this does not directly change the current logging settings, but the changes will result in the changes being notified to the listener.

Only a subset of possible configuration options will be provided in the web application, but where more esoteric configuration is desired the fall-back of editing the log file directly remains.

The possibility remains that we have simultaneous attempts to modify logging configuration both by editing the file and using the web app. But those are the breaks - it's no worse than e.g. two separate clients of the web app trying to make changes at the same time.


= Log configuration file program = 

This program has the following functionality.

  * Watches for changes to the log file. On modification it sends a the changed version to any listeners.

  * Allows listeners to register and unregister.

  * Exposes a remote method to accept some changes to the log configuration. On receiving those changes it re-writes parts of the log configuration file appropriately.

== Watching for file changes ==

Unfortunately there doesn't seem to be a nice cross platform way to watch for changes, but at least on Linux there is [http://pyinotify.sourceforge.net/ pyinotify] and on windows some [http://tgolden.sc.sabren.com/python/win32_how_do_i/watch_directory_for_changes.html techniques] to achieve what we want.
